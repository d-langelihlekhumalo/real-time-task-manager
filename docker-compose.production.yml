version: "3.8"

services:
  # ===========================
  # REVERSE PROXY & SSL
  # ===========================
  nginx:
    image: nginx:alpine
    container_name: taskmanager-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_data:/var/www/certbot:ro
    depends_on:
      - backend
      - frontend
    networks:
      - taskmanager-network

  # ===========================
  # SSL CERTIFICATE MANAGER
  # ===========================
  certbot:
    image: certbot/certbot
    container_name: taskmanager-certbot
    volumes:
      - certbot_data:/var/www/certbot
      - ./nginx/ssl:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}

  # ===========================
  # DATABASE
  # ===========================
  mysql:
    image: mysql:8.0
    container_name: taskmanager-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-TaskManagerDB}
      MYSQL_USER: ${MYSQL_USER:-taskmanager}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - taskmanager-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      timeout: 20s
      retries: 10
      interval: 30s

  # ===========================
  # BACKEND API
  # ===========================
  backend:
    build:
      context: ./backend/RealTimeTaskManager
      dockerfile: Dockerfile
    container_name: taskmanager-backend
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=mysql;Database=${MYSQL_DATABASE:-TaskManagerDB};User=${MYSQL_USER:-taskmanager};Password=${MYSQL_PASSWORD};
      - Cors__AllowedOrigins=${FRONTEND_URL}
      - HealthChecks__Enabled=true
      - SwaggerUI__Enabled=${SWAGGER_ENABLED:-false}
    expose:
      - "8080"
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
    networks:
      - taskmanager-network
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ===========================
  # FRONTEND
  # ===========================
  frontend:
    build:
      context: ./frontend/real-time-task-manager
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${BACKEND_URL}/api
        - VITE_SIGNALR_HUB_URL=${SIGNALR_URL}/taskManagerHub
    container_name: taskmanager-frontend
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# ===========================
# NETWORKS
# ===========================
networks:
  taskmanager-network:
    driver: bridge
    name: taskmanager-network

# ===========================
# VOLUMES
# ===========================
volumes:
  mysql_data:
    name: taskmanager-mysql-data
  backend_logs:
    name: taskmanager-backend-logs
  certbot_data:
    name: taskmanager-certbot-data
